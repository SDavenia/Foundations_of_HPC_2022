{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 MPI Introduction\
\
MODULES TO LOAD\
module load mpi // to load openmpi\
module load gnu // to load c++ compiler\
\
COMMANDS TO RUN\
salloc -p FHPC -n 4 // to allocate needed memoyr\
mpicc example_01.c //to compile C code\
mpiCC example_01.cpp // to compile C++ code\
\
mpirun -np 4 ./a.out //to run the executable using 4 cores\
mpirun -n echo Hello World! //simply runs this bash command 4 times\
\
GROUP: Fixed ordered set of unique MPI processes.\
COMMUNICATOR: Represents a process\'92 membership in a larger process group. It contains a group of 			      processes that can communicate with each other.\
Basically a communicator allows the processes inside it to communicate.\
\
First a group is created with the desired processes to be included and then the group is used to create a communicator.\
\
The default communicator is called MPI_COMM_WORLD\
It groups all the processes together when the program starts, every process can communicate.\
- SIZE of a communicator = number of processes inside it\
- RANK of a process: number going from 0 to (size-1) to identify each process.\
\
When we write an MPI file\
#include <mpi.h> // needed to include MPI, we can combine it with C, C++, Fortran\
\
MPI_Init(&argc, &argv) //to initialize the MPI execution environment\
MPI_Comm_rank(MPI_COMM_WORLD, &rank) //determines the rank of the calling process in the communicator\
MPI_Comm_size(MPI_COMM_WORLD, &size) //determines the size of the group associated with the communicator\
\
\
\
\
\
\
\
}